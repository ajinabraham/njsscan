rules:
  - id: generic_header_injection
    patterns:
      - pattern-either:
        - pattern-inside: function ($REQ, $RES, ...) {...}
        - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
        - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
        - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
        - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
      - pattern-either:
        - pattern: |
            $INP = $REQ.$QUERY;
            ...
            $RES.set(..., <... $INP ...>, ...)
        - pattern: |
            $INP = $REQ.$QUERY.$VAR;
            ...
            $RES.set(..., <... $INP ...>, ...)
        - pattern: |
            $INP = $REQ.$VAR;
            ...
            $RES.set(..., { $X: <... $INP ...>}, ...)
        - pattern: |
            $INP = $REQ.$QUERY.$FOO;
            ...
            $RES.set(..., { $X: <... $INP ...>}, ...)
        - pattern: |
            $INP = $REQ.$VAR;
            ...
            $RES.writeHead(..., { $X: <... $INP ...> }, ...)
        - pattern: |
            $INP = $REQ.$QUERY.$FOO;
            ...
            $RES.writeHead(..., { $X: <... $INP ...> }, ...)
        - pattern: |
            $RES.set(..., <... $REQ.$QUERY ...>, ...)
        - pattern: |
            $RES.set(..., <... $REQ.$QUERY.$VAR ...>, ...)
        - pattern: |
            $RES.set(..., { $X: <... $REQ.$VAR ...>}, ...)
        - pattern: |
            $RES.set(..., { $X: <... $REQ.$QUERY.$FOO ...>}, ...)
        - pattern: |
            $RES.writeHead(..., { $X: <... $REQ.$VAR ...> }, ...)
        - pattern: |
            $RES.writeHead(..., { $X: <... $REQ.$QUERY.$FOO ...> }, ...)
    message: >-
      If user input is not properly sanitized, an attacker can insert malicious data into response headers. 
      This can lead to HTTP response splitting, where an attacker injects additional headers or even full HTTP responses, 
      potentially altering how clients or intermediaries (e.g., proxies) handle the request. 
      This can lead to vulnerabilities like Cross-Site Scripting (XSS) and cache poisoning.
      Always sanitize and validate user inputs to ensure they do not contain characters or data that could alter the header structure (e.g., newline characters, control characters). 
      Another good option is to leverage well-established libraries or frameworks that handle headers securely. 
      Many frameworks offer built-in methods for setting headers that ensure they are correctly formatted and safe.
    languages:
      - javascript
    severity: ERROR
    metadata:
      owasp-web: a1
      cwe: cwe-644
